correlation = TRUE, halton = NA,
R = 10, tol = 10, print.level = 0)
summary(rpl.cor)
cov.mlogit
cov.mlogit(rpl.cor)
debug(mlogit)
rpl.cor <- mlogit(mode ~ price+ catch | income, Fishing, varying = 2:9,
shape = 'wide', rpar = c(price= 'n', catch = 'n'),
correlation = TRUE, halton = NA,
R = 10, tol = 10, print.level = 0)
debug(mlogit.optim)
mf
start
mf
opt
q
undebug(mlogit)
undebug(mlogit.optim)
undebug(mlogit)
undebug(mlogit.optim
)
debug(make.rpar)
debug(mlogit:::make.rpar)
rpl.cor <- mlogit(mode ~ price+ catch | income, Fishing, varying = 2:9,
shape = 'wide', rpar = c(price= 'n', catch = 'n'),
correlation = TRUE, halton = NA,
R = 10, tol = 10, print.level = 0)
rpar
correlation
estimate
norm
nr
rpar
Ktot
v
v
makeC(v)
makeC(v)%*%t(makeC(v))
head(fitted(rpl.cor))
head(fitted(rpl.uncor))
head(fitted(rpl.cor, outcome = TRUE))
head(fitted(rpl.cor, outcome = FALSE))
head(fitted(rpl.cor))
Fishing$mode[1:6]
fitted(rpl.cor, outcome = FALSE)
sum(fitted(rpl.cor, outcome = FALSE)[1,])
sum(fitted(rpl.cor, outcome = FALSE)[2,])
load(file = "C:\\Users\\user\\Dropbox\\multidim poverty\\Modelo0\\Modelo0.Rdata")
mlogit0.uncor$fitted.values[1:5]
mlogit0.uncor$probabilities[1:5,]
multinom0.mlogit$fitted.values[1:5,]
multinom0.mlogit
head(fitted(multinom0.mlogit))
head(fitted(multinom0.mlogit, outcome = FALSE))
load(file = "C:\\Users\\user\\Dropbox\\Multidim Poverty\\Modelo15\\Modelo15.Rdata")
load(file = "C:\\Users\\user\\Dropbox\\multidim poverty\\Modelo15\\ModeloSig13_1.Rdata")
load(file = "C:\\Users\\user\\Dropbox\\multidim poverty\\Modelo7_11451\\ModeloSig5_1.Rdata")
load(file = "C:\\Users\\user\\Dropbox\\Multidim Poverty\\Modelo0\\Modelo0.Rdata")
summary(multinom0.mlogit)
library(mlogit)
summary(multinom0.mlogit)
install.packages("evd")
library(evd)
uvdata <- rgev(100, loc = 0.13, scale = 1.1, shape = 0.2)
trend <- (-49:50)/100
M2 <- fgev(uvdata)
str(M2)
setwd("D:\\GithupFiles\\SFE_Quantlets\\var_block")
k = t(read.table("kappa0012_bMax_Portf.dat"))
k = t(read.table("kappa0012_bMax_Portf.dat.txt"))
k[10]
k[length(k)-10: length(k)]
k[(length(k)-10): length(k)]
a = t(read.table("alpha0012_bMax_Portf.dat"))
a = t(read.table("alpha0012_bMax_Portf.dat.txt"))
a[1:10]
a[(length(k)-10): length(a)]
b = t(read.table("beta0012_bMax_Portf.dat"))
b = t(read.table("beta0012_bMax_Portf.dat.txt"))
b[(length(k)-10): length(b)]
b[1:10]
a = read.table("BAYER_close_0012.dat")
b = read.table("BMW_close_0012.dat")
c = read.table("SIEMENS_close_0012.dat")
d = read.table("VW_close_0012.dat")
# Create portfolio
e = a + b + c + d
e = as.matrix(e)               # define as matrix
end = NROW(e)                  # number of observations
NROW(e)
x = e[2:end] - e[1:(end - 1)]  # returns
x = -x                         # negative returns
T = length(x)                  # number of observations
h = 250                        # observation window
p = 0.95                       # quantile for VaR
n = 16                         # observation window for estimating quantile in VaR
v = read.table("VaR0012_bMax_Portf.dat")  # load VaR estimates from maximal block model
v = t(v)
v = -v
V = a + b + c + d
D = dim(V)
L = V[-1, ] - V[1:(D[1] - 1), ]
T = length(L)
outlier = matrix(, 1, T - h)
exceedVaR = matrix(, , )
exceedVaR = (L[(1 + h):(D[1] - 1)] < v[1:(T - h)])  # Check for exceedances
for (j in 1:(T - h)) {
if (exceedVaR[j] == TRUE)
{
outlier[j] = L[j + h]
}  # Find exceedances
}
K.1 = which(is.finite(outlier))
K = is.finite(outlier)
uvdata <- rgev(100, loc = 0.13, scale = 1.1, shape = 0.2)
M2 <- fgev(uvdata)
library(evd)
uvdata <- rgev(100, loc = 0.13, scale = 1.1, shape = 0.2)
M2 <- fgev(uvdata)
str(M2)
fgev(uvdata)$params
fgev(uvdata)$param
str(fgev(uvdata)$param)
fgev(z)$param[loc]
fgev(z)$param["loc"]
(fgev(z)$param)["loc"]
(fgev(uvdata)$param)["loc"]
str((fgev(uvdata)$param)["loc"])
# clear all variables and close windows
rm(list = ls(all = TRUE))
graphics.off()
# set working directory
# setwd("C:/...")
# install and load packages
libraries = c("evd")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# data import
Data = read.csv("2004-2014_dax_ftse.csv")
# date variable as variable of class Date
Data$Date = as.Date(Data$Date, "%Y-%m-%d")
# Create portfolio
x       = Data$BAYER + Data$BMW + Data$SIEMENS + Data$VOLKSWAGEN
x       = diff(x)     # returns
minus_x = -x          # negative returns
Obs     = length(x)   # number of observations
h       = 250         # size of moving window
p       = 0.95        # quantile for the Value at Risk
n = 16                # observation window for estimating quantile in VaR
block_max = function(y,n,p){
N = length(y)
k = floor(N/n)
z = rep(NaN, k)
for(j in 1:(k-1)){
r    = y[((j-1)*n+1):(j*n)]
z[j] = max(r)
}
r     = y[((k-1)*n+1):length(y)]
z[k]  = max(r)
parmhat = fgev(z)$param
kappa   = parmhat["shape"]
tau     = -1/kappa
alpha   = parmhat["scale"]
beta    = parmhat["loc"]
pext    = p^n
var     = beta+alpha/kappa*((-log(1-pext))^(-kappa)-1)
out    = c(var=var,tau=tau,alpha=alpha,beta=beta,kappa=kappa)
}
results = data.frame(var=rep(NaN,Obs-h), tau=rep(NaN,Obs-h), alpha=rep(NaN,Obs-h),
beta=rep(NaN,Obs-h), kappa=rep(NaN,Obs-h) )
for(i in 1:(Obs-h)){
y = minus_x[i:(i+h-1)]
results[i,] = block_max(y,n,p)
}
ls()
rm(i)
i = 1
y = minus_x[i:(i+h-1)]
# clear all variables and close windows
rm(list = ls(all = TRUE))
graphics.off()
# set working directory
# setwd("C:/...")
# install and load packages
libraries = c("evd", "ismev")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# data import
Data = read.csv("2004-2014_dax_ftse.csv")
# date variable as variable of class Date
Data$Date = as.Date(Data$Date, "%Y-%m-%d")
# Create portfolio
x       = Data$BAYER + Data$BMW + Data$SIEMENS + Data$VOLKSWAGEN
x       = diff(x)     # returns
minus_x = -x          # negative returns
Obs     = length(x)   # number of observations
h       = 250         # size of moving window
p       = 0.95        # quantile for the Value at Risk
n       = 16          # observation window for estimating quantile in VaR
i = 1
y = minus_x[i:(i+h-1)]
N = length(y)
k = floor(N/n)
z = rep(NaN, k)
for(j in 1:(k-1)){
r    = y[((j-1)*n+1):(j*n)]
z[j] = max(r)
}
r     = y[((k-1)*n+1):length(y)]
z[k]  = max(r)
z
gev.fit(z)
library(ismev)
fgev(z)
parmhat = fgev(z)$param # gev.fit  fgev
parmhat
kappa   = parmhat["shape"]
tau     = -1/kappa
alpha   = parmhat["scale"]
beta    = parmhat["loc"]
pext    = p^n
var     = beta+alpha/kappa*((-log(1-pext))^(-kappa)-1)
out    = c(var=var,tau=tau,alpha=alpha,beta=beta,kappa=kappa)
out
rm(i)
block_max = function(y,n,p){
N = length(y)
k = floor(N/n)
z = rep(NaN, k)
for(j in 1:(k-1)){
r    = y[((j-1)*n+1):(j*n)]
z[j] = max(r)
}
r     = y[((k-1)*n+1):length(y)]
z[k]  = max(r)
parmhat = fgev(z)$param # gev.fit  fgev
kappa   = parmhat["shape"]
tau     = -1/kappa
alpha   = parmhat["scale"]
beta    = parmhat["loc"]
pext    = p^n
var     = beta+alpha/kappa*((-log(1-pext))^(-kappa)-1)
out    = c(var=var,tau=tau,alpha=alpha,beta=beta,kappa=kappa)
}
for(i in 1:(Obs-h)){
# i =
y = minus_x[i:(i+h-1)]
results[i,] = block_max(y,n,p)
}
results = data.frame(var=rep(NaN,Obs-h), tau=rep(NaN,Obs-h), alpha=rep(NaN,Obs-h),
beta=rep(NaN,Obs-h), kappa=rep(NaN,Obs-h) )
for(i in 1:(Obs-h)){
# i =
y = minus_x[i:(i+h-1)]
results[i,] = block_max(y,n,p)
}
i
(Obs-h)
y
N = length(y)
k = floor(N/n)
z = rep(NaN, k)
for(j in 1:(k-1)){
r    = y[((j-1)*n+1):(j*n)]
z[j] = max(r)
}
r     = y[((k-1)*n+1):length(y)]
z[k]  = max(r)
z
fgev(z)
library(fExtremes)
gevFit(z)
str(gevFit(z))
gevFit(z)$par.ests
gevFit(z)@fit
gevFit(z)@fit$par.ests
gevFit(z)
str(gevFit(z))
gev.fit(z)
fgev(z)
fgev(z, std.err = FALSE)
y
z
fgev(z, std.err = FALSE)$param
block_max = function(y,n,p){
N = length(y)
k = floor(N/n)
z = rep(NaN, k)
for(j in 1:(k-1)){
r    = y[((j-1)*n+1):(j*n)]
z[j] = max(r)
}
r     = y[((k-1)*n+1):length(y)]
z[k]  = max(r)
parmhat = fgev(z, std.err = FALSE)$param
kappa   = parmhat["shape"]
tau     = -1/kappa
alpha   = parmhat["scale"]
beta    = parmhat["loc"]
pext    = p^n
var     = beta+alpha/kappa*((-log(1-pext))^(-kappa)-1)
out    = c(var=var,tau=tau,alpha=alpha,beta=beta,kappa=kappa)
}
for(i in 1:(Obs-h)){
# i = 2056
y = minus_x[i:(i+h-1)]
results[i,] = block_max(y,n,p)
}
results$alpha
results$alpha[2313]
outlier   = rep(NaN,Obs-h)
exceedVaR = outlier
for(j in 1:(Obs-h)){
exceedVaR[j] = (L[j+h]<v[j])
if(exceedVaR[j]>0){
outlier[j] = L[j+h]
}
}
v = -results$var
L = x
# preallocation
outlier   = rep(NaN,Obs-h)
exceedVaR = outlier
for(j in 1:(Obs-h)){
exceedVaR[j] = (L[j+h]<v[j])
if(exceedVaR[j]>0){
outlier[j] = L[j+h]
}
}
v = -results$var
L = minus_x
outlier   = rep(NaN,Obs-h)
exceedVaR = outlier
for(j in 1:(Obs-h)){
exceedVaR[j] = (L[j+h]<v[j])
if(exceedVaR[j]>0){
outlier[j] = L[j+h]
}
}
windows()
plot(Data$Date[(h+2):length(Data$Date)],minus_x[(h+1):length(L)], xlab = "",
ylab = "", col = "blue", pch = 18)
points(date_outlier, outlier, pch = 18, col = "magenta")
p       = sum(exceedVaR)/(Obs-h)
K       = which(is.finite(outlier))
outlier = outlier[K]
yplus   = K * 0 + min(L[(h + 1):length(L)]) - 2
date_outlier = Data$Date[(h+2):length(Data$Date)]
date_outlier = date_outlier[K]
points(date_outlier, outlier, pch = 18, col = "magenta")
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 5, type = "l")
points(date_outlier, yplus, pch = 3, col = "dark green")
legend("topleft", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, NA, 18),
lwd = c(NA, 5, NA), col = c("blue", "red", "magenta"))
title("Block Maxima Model")
print(paste("Exceedances ratio:", "", p))
windows()
plot(Data$Date[(h+2):length(Data$Date)],minus_x[(h+1):length(L)], xlab = "",
ylab = "", col = "blue", pch = 18)
points(date_outlier, outlier, pch = 18, col = "magenta")
line(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 5, type = "l")
points(date_outlier, yplus, pch = 3, col = "dark green")
legend("topleft", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, NA, 18),
lwd = c(NA, 5, NA), col = c("blue", "red", "magenta"))
title("Block Maxima Model")
windows()
plot(Data$Date[(h+2):length(Data$Date)],minus_x[(h+1):length(L)], xlab = "",
ylab = "", col = "blue", pch = 18)
points(date_outlier, outlier, pch = 18, col = "magenta")
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 5, type = "l")
points(date_outlier, yplus, pch = 3, col = "dark green")
legend("topleft", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, NA, 18),
lwd = c(NA, 5, NA), col = c("blue", "red", "magenta"))
title("Block Maxima Model")
plot(Data$Date[(h+2):length(Data$Date)],minus_x[(h+1):length(L)], xlab = "",
ylab = "", col = "blue", pch = 18)
points(date_outlier, outlier, pch = 18, col = "magenta")
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 3, type = "l")
points(date_outlier, yplus, pch = 3, col = "dark green")
legend("topleft", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, NA, 18),
lwd = c(NA, 5, NA), col = c("blue", "red", "magenta"))
title("Block Maxima Model")
plot(Data$Date[(h+2):length(Data$Date)],minus_x[(h+1):length(L)], xlab = "",
ylab = "", col = "blue", pch = 18)
points(date_outlier, outlier, pch = 18, col = "magenta")
line(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 3)#, type = "l")
points(date_outlier, yplus, pch = 2, col = "dark green")
legend("topleft", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, NA, 18),
lwd = c(NA, 5, NA), col = c("blue", "red", "magenta"))
points(date_outlier, yplus, pch = 3, col = "dark green")
line(Data$Date[(h+2):length(Data$Date)], v, col= "red")#, lwd = 3)#, type = "l")
v
lines(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 3)#, type = "l")
legend("topleft", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, NA, 18),
lwd = c(NA, 3, NA), col = c("blue", "red", "magenta"))
plot(Data$Date[(h+2):length(Data$Date)],minus_x[(h+1):length(L)], xlab = "",
ylab = "", col = "blue", pch = 18)
points(date_outlier, outlier, pch = 18, col = "magenta")
lines(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 3)#, type = "l")
points(date_outlier, yplus, pch = 3, col = "dark green")
legend("topleft", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, NA, 18),
lwd = c(NA, 3, NA), col = c("blue", "red", "magenta"))
title("Block Maxima Model")
print(paste("Exceedances ratio:", "", p))
# clear all variables and close windows
rm(list = ls(all = TRUE))
graphics.off()
# set working directory
# setwd("C:/...")
# install and load packages
libraries = c("evd")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# data import
Data = read.csv("2004-2014_dax_ftse.csv")
# date variable as variable of class Date
Data$Date = as.Date(Data$Date, "%Y-%m-%d")
# Create portfolio
x       = Data$BAYER + Data$BMW + Data$SIEMENS + Data$VOLKSWAGEN
x       = diff(x)     # returns
minus_x = -x          # negative returns
Obs     = length(x)   # number of observations
h       = 250         # size of moving window
p       = 0.95        # quantile for the Value at Risk
n       = 16          # observation window for estimating quantile in VaR
# function ----
block_max = function(y,n,p){
N = length(y)
k = floor(N/n)
z = rep(NaN, k)
for(j in 1:(k-1)){
r    = y[((j-1)*n+1):(j*n)]
z[j] = max(r)
}
r     = y[((k-1)*n+1):length(y)]
z[k]  = max(r)
parmhat = fgev(z, std.err = FALSE)$param
kappa   = parmhat["shape"]
tau     = -1/kappa
alpha   = parmhat["scale"]
beta    = parmhat["loc"]
pext    = p^n
var     = beta+alpha/kappa*((-log(1-pext))^(-kappa)-1)
out    = c(var=var,tau=tau,alpha=alpha,beta=beta,kappa=kappa)
}
# Value at Risk ----
# preallocation
results = data.frame(var=rep(NaN,Obs-h), tau=rep(NaN,Obs-h), alpha=rep(NaN,Obs-h),
beta=rep(NaN,Obs-h), kappa=rep(NaN,Obs-h) )
for(i in 1:(Obs-h)){
y = minus_x[i:(i+h-1)]
results[i,] = block_max(y,n,p)
}
v = -results$var
L = x
# preallocation
outlier   = rep(NaN,Obs-h)
exceedVaR = outlier
for(j in 1:(Obs-h)){
exceedVaR[j] = (L[j+h]<v[j])
if(exceedVaR[j]>0){
outlier[j] = L[j+h]
}
}
p       = sum(exceedVaR)/(Obs-h)
K       = which(is.finite(outlier))
outlier = outlier[K]
yplus   = K * 0 + min(L[(h + 1):length(L)]) - 2
date_outlier = Data$Date[(h+2):length(Data$Date)]
date_outlier = date_outlier[K]
# plot ----
windows()
plot(Data$Date[(h+2):length(Data$Date)],x[(h+1):length(L)], xlab = "",
ylab = "", col = "blue", pch = 18)
points(date_outlier, outlier, pch = 18, col = "magenta")
lines(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 3)
points(date_outlier, yplus, pch = 3, col = "dark green")
legend("topleft", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, NA, 18),
lwd = c(NA, 3, NA), col = c("blue", "red", "magenta"))
title("Block Maxima Model")
# Print the exceedances ratio
print(paste("Exceedances ratio:", "", p))
plot(Data$Date[(h+2):length(Data$Date)],x[(h+1):Obs], xlab = "",
ylab = "", col = "blue", pch = 18)
head(results)
head(results[,-2])
head(results[,-1:2])
head(results[,-c(1,2)])
head(results[,-(1:2)])
ylim = c(min(min(results[,-(1:2)]))-1, max(max(results[,-(1:2)]))+1)
plot(Data$Date[(h+2):length(Data$Date)],results$beta, xlab = "",
ylab = "", col = "blue", type = "l", lwd = 2, ylim = ylim)
plot(Data$Date[(h+2):length(Data$Date)],results$kappa, xlab = "",
ylab = "", col = "blue", type = "l", lwd = 2, ylim = ylim)
lines(Data$Date[(h+2):length(Data$Date)],results$beta, col = "red", lwd = 2)
lines(Data$Date[(h+2):length(Data$Date)],results$shape, col = "magenta", lwd = 2)
ylim = c(min(min(results[,-(1:2)]))-1, max(max(results[,-(1:2)]))+1)
windows()
plot(Data$Date[(h+2):length(Data$Date)],results$kappa, xlab = "",
ylab = "", col = "blue", type = "l", lwd = 2, ylim = ylim)
lines(Data$Date[(h+2):length(Data$Date)],results$alpha, col = "red", lwd = 2)
lines(Data$Date[(h+2):length(Data$Date)],results$beta, col = "magenta", lwd = 2)
legend("topleft", c("Shape Parameter", "Scale Parameter",  "Location Parameter"),
lwd = c(2, 2, 2), col = c("blue", "red", "magenta"))
title("Parameters in Block Maxima Model")
p
