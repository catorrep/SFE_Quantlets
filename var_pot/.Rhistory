x       = Data$BAYER + Data$BMW + Data$SIEMENS + Data$VOLKSWAGEN
x       = diff(x)     # returns
minus_x = -x
p       = 0.95        # quantile for the Value at Risk
q       = 0.1
T       = length(x)
# function ----
var_pot = function(y,h,p,q){
N  = floor(h*q)
ys = sort(y,decreasing = TRUE)
u  = ys[N+1]
z  = y[y>u]-u
params = gpd.fit(z, threshold = 1 - p)
ksi    = params$mle[2]
beta   = params$mle[1]
var    = u + beta/ksi*((h/N*(1-p))^(-ksi)-1)
out    = c(var=var,ksi=ksi,beta=beta,u=u)
}
results = data.frame(var=rep(NaN,T-h), ksi=rep(NaN,T-h),
beta=rep(NaN,T-h), ksi=rep(NaN,T-h) )
for(i in 1:(T-h)){
# i = 2
y = minus_x[i:(i+h-1)]
results[i,] = var_pot(y,h,p,q)
}
a = var_pot(y,h,p,q)
a = invisible(var_pot(y,h,p,q))
a = invisible(var_pot(y,h,p,q))
v = -results$var
L = x
v
outlier   = rep(NaN,T-h)
exceedVaR = outlier
for(j in 1:(T-h)){
exceedVaR[j] = (L[j+h]<v[j])
if(exceedVaR[j]>0)
outlier[j] = L[j+h]
}
p       = sum(exceedVaR)/(T-h)
p
K       = find(is.finite(outlier));
K       = which(is.finite(outlier))
K
date_outlier = Data$Date[h+2:end];
date_outlier = Data$Date[(h+2):length(Data$Date)]
date_outlier = date_outlier[K]
date_outlier
plot(Data$Date[(h+2):length(Data$Date)],L((h+1):length(L)), '.')
L
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)], '.')
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)], type = "p")
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)],  type = "p", xlab = "",
ylab = "", axes = FALSE)
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)],  type = "p", xlab = "",
ylab = "")
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)],  type = "p", xlab = "",
ylab = "", col = "blue")
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)],  type = "p", xlab = "",
ylab = "", col = "blue", pch = 18)
points(Data.Date(h+2:end), v, col= "magenta")
points(Data$Date[h+2:end], v, col= "magenta")
points(Data$Date[(h+2):length(Data$Date)], v, col= "magenta")
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)],  type = "p", xlab = "",
ylab = "", col = "blue", pch = 18)
points(Data$Date[(h+2):length(Data$Date)], v, col= "magenta", pch = 18)
points(Data$Date[(h+2):length(Data$Date)], v, col= "magenta", pch = 16)
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)],  type = "p", xlab = "",
ylab = "", col = "blue", pch = 18)
points(Data$Date[(h+2):length(Data$Date)], v, col= "magenta", pch = 16)
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)],  type = "p", xlab = "",
ylab = "", col = "blue", pch = 18)
points(Data$Date[(h+2):length(Data$Date)], v, col= "magenta", pch = 20)
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)],  type = "p", xlab = "",
ylab = "", col = "blue", pch = 20)
points(Data$Date[(h+2):length(Data$Date)], v, col= "magenta", pch = 20)
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", pch = 20)
points(date_outlier, outlier, pch = 18, col = "magenta")
length(outlier)
length(date_outlier)
outlier = outlier[K]
length(outlier)
points(K, outlier, pch = 18, col = "magenta")
points(date_outlier, outlier, pch = 18, col = "magenta")
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)],  type = "p", xlab = "",
ylab = "", col = "blue", pch = 20)
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 2)
points(date_outlier, outlier, pch = 18, col = "magenta")
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)],  type = "p", xlab = "",
ylab = "", col = "blue", pch = 20)
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 1)
points(date_outlier, outlier, pch = 18, col = "magenta")
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)],  type = "p", xlab = "",
ylab = "", col = "blue", pch = 20)
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 5)
points(date_outlier, outlier, pch = 18, col = "magenta")
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)],  type = "p", xlab = "",
ylab = "", col = "blue", pch = 20)
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 0.5)
points(date_outlier, outlier, pch = 18, col = "magenta")
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)],  type = "p", xlab = "",
ylab = "", col = "blue", pch = 20)
points(Data$Date[(h+2):length(Data$Date)], v, col= "red")
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 10)
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 0.5)
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)],  type = "p", xlab = "",
ylab = "", col = "blue", pch = 20)
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 0.5)
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)], xlab = "",
ylab = "", col = "blue", pch = 18)
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 0.5)
points(date_outlier, outlier, pch = 18, col = "magenta")
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)], xlab = "",
ylab = "", col = "blue", pch = 18)
points(date_outlier, outlier, pch = 18, col = "magenta")
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 0.5)
yplus = K * 0 + min(L[(h + 1):length(L)]) - 2
points(Data$Date[(h+2):length(Data$Date)], yplus, pch = 3, col = "dark green")
points(date_outlier, yplus, pch = 3, col = "dark green")
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 0.5)
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 0.5)
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)], xlab = "",
ylab = "", col = "blue", pch = 18)
points(date_outlier, outlier, pch = 18, col = "magenta")
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 0.5, type = "l")
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 2, type = "l")
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 8, type = "l")
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)], xlab = "",
ylab = "", col = "blue", pch = 18)
points(date_outlier, outlier, pch = 18, col = "magenta")
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 5, type = "l")
legend("topright", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, 15, 18),
col = c("blue", "red", "magenta"))
legend( x="topright",
legend=c("Red line, blue points","Green line, purple points"),
col=c("red","blue","green","purple"), lwd=1, lty=c(1,2),
pch=c(15,17), merge=FALSE )
legend("topright", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, NA, 18),
lwd = c(NA, 5, NA), col = c("blue", "red", "magenta"))
legend("topleft", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, NA, 18),
lwd = c(NA, 5, NA), col = c("blue", "red", "magenta"))
print(paste("Exceedances ratio:", "", p))
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)], xlab = "",
ylab = "", col = "blue", pch = 18)
points(date_outlier, outlier, pch = 18, col = "magenta")
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 5, type = "l")
yplus = K * 0 + min(L[(h + 1):length(L)]) - 2
points(date_outlier, yplus, pch = 3, col = "dark green")
legend("topleft", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, NA, 18),
lwd = c(NA, 5, NA), col = c("blue", "red", "magenta"))
legend("topleft", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, NA, 18),
lwd = c(NA, 5, NA), col = c("blue", "red", "magenta"), cex = 0.5)
legend("topleft", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, NA, 18),
lwd = c(NA, 5, NA), col = c("blue", "red", "magenta"), cex = 0.7)
legend("topleft", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, NA, 18),
lwd = c(NA, 5, NA), col = c("blue", "red", "magenta"), cex = 0.6)
windows()
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)], xlab = "",
ylab = "", col = "blue", pch = 18)
points(date_outlier, outlier, pch = 18, col = "magenta")
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 5, type = "l")
yplus = K * 0 + min(L[(h + 1):length(L)]) - 2
points(date_outlier, yplus, pch = 3, col = "dark green")
legend("topleft", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, NA, 18),
lwd = c(NA, 5, NA), col = c("blue", "red", "magenta"), cex = 0.6)
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)], xlab = "",
ylab = "", col = "blue", pch = 18)
points(date_outlier, outlier, pch = 18, col = "magenta")
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 5, type = "l")
yplus = K * 0 + min(L[(h + 1):length(L)]) - 2
points(date_outlier, yplus, pch = 3, col = "dark green")
legend("topleft", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, NA, 18),
lwd = c(NA, 5, NA), col = c("blue", "red", "magenta"))
# clear variables and close windows
rm(list = ls(all = TRUE))
graphics.off()
# set working directory
# setwd("C:/...")
setwd("D:\\GithupFiles\\SFE_Quantlets\\var_pot")
# install and load packages
libraries = c("ismev")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# data import
Data = read.csv("2004-2014_dax_ftse.csv")
# Date variable as variable of class Date
Data$Date = as.Date(Data$Date, "%Y-%m-%d")
h       = 250         # size of moving window
x       = Data$BAYER + Data$BMW + Data$SIEMENS + Data$VOLKSWAGEN
x       = diff(x)     # returns
minus_x = -x
p       = 0.95        # quantile for the Value at Risk
q       = 0.1
T       = length(x)
# function ----
var_pot = function(y,h,p,q){
N  = floor(h*q)
ys = sort(y,decreasing = TRUE)
u  = ys[N+1]
z  = y[y>u]-u
params = gpd.fit(z, threshold = 1 - p)
ksi    = params$mle[2]
beta   = params$mle[1]
var    = u + beta/ksi*((h/N*(1-p))^(-ksi)-1)
out    = c(var=var,ksi=ksi,beta=beta,u=u)
}
# Value at Risk ----
# preallocation
results = data.frame(var=rep(NaN,T-h), ksi=rep(NaN,T-h),
beta=rep(NaN,T-h), ksi=rep(NaN,T-h) )
for(i in 1:(T-h)){
# i = 2
y = minus_x[i:(i+h-1)]
results[i,] = var_pot(y,h,p,q)
# a = var_pot(y,h,p,q)
}
# number of exceedances fo Value at Risk, p ----
v = -results$var
L = x
# preallocation
outlier   = rep(NaN,T-h)
exceedVaR = outlier
for(j in 1:(T-h)){
exceedVaR[j] = (L[j+h]<v[j])
if(exceedVaR[j]>0)
outlier[j] = L[j+h]
}
p       = sum(exceedVaR)/(T-h)
K       = which(is.finite(outlier))
outlier = outlier[K]
date_outlier = Data$Date[(h+2):length(Data$Date)]
date_outlier = date_outlier[K]
# plot ----
windows()
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)], xlab = "",
ylab = "", col = "blue", pch = 18)
points(date_outlier, outlier, pch = 18, col = "magenta")
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 5, type = "l")
yplus = K * 0 + min(L[(h + 1):length(L)]) - 2
points(date_outlier, yplus, pch = 3, col = "dark green")
legend("topleft", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, NA, 18),
lwd = c(NA, 5, NA), col = c("blue", "red", "magenta"))
# Print the exceedances ratio
print(paste("Exceedances ratio:", "", p))
# clear all variables and close windows
rm(list = ls(all = TRUE))
graphics.off()
# set working directory
# setwd("C:/...")
# install and load packages
libraries = c("ismev")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# data import
Data = read.csv("2004-2014_dax_ftse.csv")
# Date variable as variable of class Date
Data$Date = as.Date(Data$Date, "%Y-%m-%d")
h       = 250         # size of moving window
x       = Data$BAYER + Data$BMW + Data$SIEMENS + Data$VOLKSWAGEN
x       = diff(x)     # returns
minus_x = -x
p       = 0.95        # quantile for the Value at Risk
q       = 0.1
Obs     = length(x)
# function ----
var_pot = function(y,h,p,q){
N  = floor(h*q)
ys = sort(y,decreasing = TRUE)
u  = ys[N+1]
z  = y[y>u]-u
params = gpd.fit(z, threshold = 1 - p)
ksi    = params$mle[2]
beta   = params$mle[1]
var    = u + beta/ksi*((h/N*(1-p))^(-ksi)-1)
out    = c(var=var,ksi=ksi,beta=beta,u=u)
}
# Value at Risk ----
# preallocation
results = data.frame(var=rep(NaN,Obs-h), ksi=rep(NaN,Obs-h),
beta=rep(NaN,Obs-h), ksi=rep(NaN,Obs-h) )
for(i in 1:(Obs-h)){
# i = 2
y = minus_x[i:(i+h-1)]
results[i,] = var_pot(y,h,p,q)
# a = var_pot(y,h,p,q)
}
# number of exceedances fo Value at Risk, p ----
v = -results$var
L = x
# preallocation
outlier   = rep(NaN,Obs-h)
exceedVaR = outlier
for(j in 1:(Obs-h)){
exceedVaR[j] = (L[j+h]<v[j])
if(exceedVaR[j]>0)
outlier[j] = L[j+h]
}
p       = sum(exceedVaR)/(Obs-h)
K       = which(is.finite(outlier))
outlier = outlier[K]
date_outlier = Data$Date[(h+2):length(Data$Date)]
date_outlier = date_outlier[K]
# plot ----
windows()
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)], xlab = "",
ylab = "", col = "blue", pch = 18)
points(date_outlier, outlier, pch = 18, col = "magenta")
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 5, type = "l")
yplus = K * 0 + min(L[(h + 1):length(L)]) - 2
points(date_outlier, yplus, pch = 3, col = "dark green")
legend("topleft", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, NA, 18),
lwd = c(NA, 5, NA), col = c("blue", "red", "magenta"))
# Print the exceedances ratio
print(paste("Exceedances ratio:", "", p))
windows()
plot(Data$Date[(h+2):length(Data$Date)],L[(h+1):length(L)], xlab = "",
ylab = "", col = "blue", pch = 18)
points(date_outlier, outlier, pch = 18, col = "magenta")
points(Data$Date[(h+2):length(Data$Date)], v, col= "red", lwd = 5, type = "l")
yplus = K * 0 + min(L[(h + 1):length(L)]) - 2
points(date_outlier, yplus, pch = 3, col = "dark green")
legend("topleft", c("Profit/Loss", "VaR", "Exceedances"), pch = c(18, NA, 18),
lwd = c(NA, 5, NA), col = c("blue", "red", "magenta"))
title("Peaks Over Threshold Model")
library(yaml)
yaml.load_file("D:\\GithupFiles\\SFE_Quantlets\\QID-2292-SFEvar_pot_backtesting\\Metainfo.txt")
yaml.load_file("D:\\GithupFiles\\SFE_Quantlets\\QID-2292-SFEvar_pot_backtesting\\Metainfo.txt")
# clear all variables and close windows
rm(list = ls(all = TRUE))
graphics.off()
# set working directory
# setwd("C:/...")
# install and load packages
libraries = c("ismev")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# data import
Data = read.csv("2004-2014_dax_ftse.csv")
# Date variable as variable of class Date
Data$Date = as.Date(Data$Date, "%Y-%m-%d")
h       = 250         # size of moving window
x       = Data$BAYER + Data$BMW + Data$SIEMENS + Data$VOLKSWAGEN
x       = diff(x)     # returns
minus_x = -x
p       = 0.95        # quantile for the Value at Risk
q       = 0.1
Obs     = length(x)
# clear all variables and close windows
rm(list = ls(all = TRUE))
graphics.off()
# set working directory
# setwd("C:/...")
# install and load packages
libraries = c("ismev")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# data import
Data = read.csv("2004-2014_dax_ftse.csv")
# Date variable as variable of class Date
Data$Date = as.Date(Data$Date, "%Y-%m-%d")
h       = 250         # size of moving window
x       = Data$BAYER + Data$BMW + Data$SIEMENS + Data$VOLKSWAGEN
x       = diff(x)     # returns
minus_x = -x
p       = 0.95        # quantile for the Value at Risk
q       = 0.1
Obs     = length(x)
# function ----
var_pot = function(y,h,p,q){
# Inputs:
# y - vector of returns
# p - quantile for at which Value at Risk should be estimated
# h - size of the window
# q - scalar, e.g. 0.1
N  = floor(h*q)
ys = sort(y,decreasing = TRUE)
u  = ys[N+1]
z  = y[y>u]-u
params = gpd.fit(z, threshold = u)
ksi    = params$mle[2]
beta   = params$mle[1]
var    = u + beta/ksi*((h/N*(1-p))^(-ksi)-1)
out    = c(var=var,ksi=ksi,beta=beta,u=u)
}
# Value at Risk ----
# preallocation
results = data.frame(var=rep(NaN,Obs-h), ksi=rep(NaN,Obs-h),
beta=rep(NaN,Obs-h), ksi=rep(NaN,Obs-h) )
for(i in 1:(Obs-h)){
# i = 2
y = minus_x[i:(i+h-1)]
results[i,] = var_pot(y,h,p,q)
# a = var_pot(y,h,p,q)
}
v = -results$var
L = x
# preallocation
outlier   = rep(NaN,Obs-h)
exceedVaR = outlier
for(j in 1:(Obs-h)){
exceedVaR[j] = (L[j+h]<v[j])
if(exceedVaR[j]>0)
outlier[j] = L[j+h]
}
p       = sum(exceedVaR)/(Obs-h)
p
v
# clear all variables and close windows
rm(list = ls(all = TRUE))
graphics.off()
# set working directory
# setwd("C:/...")
# install and load packages
libraries = c("ismev")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# data import
Data = read.csv("2004-2014_dax_ftse.csv")
# Date variable as variable of class Date
Data$Date = as.Date(Data$Date, "%Y-%m-%d")
h       = 250         # size of moving window
x       = Data$BAYER + Data$BMW + Data$SIEMENS + Data$VOLKSWAGEN
x       = diff(x)     # returns
minus_x = -x
p       = 0.95        # quantile for the Value at Risk
q       = 0.1
Obs     = length(x)
# function ----
var_pot = function(y,h,p,q){
# Inputs:
# y - vector of returns
# p - quantile for at which Value at Risk should be estimated
# h - size of the window
# q - scalar, e.g. 0.1
N  = floor(h*q)
ys = sort(y,decreasing = TRUE)
u  = ys[N+1]
z  = y[y>u]-u
params = gpd.fit(z, threshold = 1 - p)
ksi    = params$mle[2]
beta   = params$mle[1]
var    = u + beta/ksi*((h/N*(1-p))^(-ksi)-1)
out    = c(var=var,ksi=ksi,beta=beta,u=u)
}
# Value at Risk ----
# preallocation
results = data.frame(var=rep(NaN,Obs-h), ksi=rep(NaN,Obs-h),
beta=rep(NaN,Obs-h), ksi=rep(NaN,Obs-h) )
for(i in 1:(Obs-h)){
y = minus_x[i:(i+h-1)]
results[i,] = var_pot(y,h,p,q)
}
dim(results)
length(Data$Date[(h+2):length(Data$Date)])
plot(Data$Date[(h+2):length(Data$Date)],results$beta, xlab = "",
ylab = "", col = "blue", type = "l", lwd = 2)
lines(Data$Date[(h+2):length(Data$Date)],results$ksi, col = "red", lwd = 2)
plot(Data$Date[(h+2):length(Data$Date)],results$beta, xlab = "",
ylab = "", col = "blue", type = "l", lwd = 2, ylim = c(-1, 17))
plot(Data$Date[(h+2):length(Data$Date)],results$beta, xlab = "",
ylab = "", col = "blue", type = "l", lwd = 2)
lines(Data$Date[(h+2):length(Data$Date)],results$ksi, col = "red", lwd = 2)
plot(Data$Date[(h+2):length(Data$Date)],results$beta, xlab = "",
ylab = "", col = "blue", type = "l", lwd = 2, axes = FALSE)
lines(Data$Date[(h+2):length(Data$Date)],results$ksi, col = "red", lwd = 2)
plot(Data$Date[(h+2):length(Data$Date)],results$beta, xlab = "",
ylab = "", col = "blue", type = "l", lwd = 2, axes = FALSE)
lines(Data$Date[(h+2):length(Data$Date)],results$ksi, col = "red", lwd = 2)
lines(Data$Date[(h+2):length(Data$Date)],results$u, col = "magenta", lwd = 2)
title("Parameters in Peaks Over Threshold Model")
legend("topleft", c("Scale Parameter", "Shape Parameter", "Threshold"), pch = c(15,
15, 15), col = c("blue", "red", "magenta"))
legend("topleft", c("Scale Parameter", "Shape Parameter", "Threshold"), lwd = c(2,
2, 2), col = c("blue", "red", "magenta"))
results[, -4]
head(results[, -4])
head(results[, -1])
results = data.frame(var=rep(NaN,Obs-h), ksi=rep(NaN,Obs-h),
beta=rep(NaN,Obs-h), u=rep(NaN,Obs-h))
for(i in 1:(Obs-h)){
y = minus_x[i:(i+h-1)]
results[i,] = var_pot(y,h,p,q)
}
min(min(results[, -1])
)
ylim = c(min(min(results[, -1])), max(max(results[, -1])))
ylim = c(min(min(results[, -1]))-1, max(max(results[, -1]))+1)
plot(Data$Date[(h+2):length(Data$Date)],results$beta, xlab = "",
ylab = "", col = "blue", type = "l", lwd = 2, ylim = ylim)
lines(Data$Date[(h+2):length(Data$Date)],results$ksi, col = "red", lwd = 2)
lines(Data$Date[(h+2):length(Data$Date)],results$u, col = "magenta", lwd = 2)
legend("topleft", c("Scale Parameter", "Shape Parameter", "Threshold"),
lwd = c(2, 2, 2), col = c("blue", "red", "magenta"))
title("Parameters in Peaks Over Threshold Model")
windows()
plot(Data$Date[(h+2):length(Data$Date)],results$beta, xlab = "",
ylab = "", col = "blue", type = "l", lwd = 2, ylim = ylim)
lines(Data$Date[(h+2):length(Data$Date)],results$ksi, col = "red", lwd = 2)
lines(Data$Date[(h+2):length(Data$Date)],results$u, col = "magenta", lwd = 2)
legend("topleft", c("Scale Parameter", "Shape Parameter", "Threshold"),
lwd = c(2, 2, 2), col = c("blue", "red", "magenta"))
title("Parameters in Peaks Over Threshold Model")
yaml.load_file("D:\\GithupFiles\\SFE_Quantlets\\QID-2293-SFEvar_pot_params\\Metainfo.txt")
